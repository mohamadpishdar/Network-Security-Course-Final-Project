usertype pcr ;
hashfunction h1;
protocol s (S,R) {
role S {
const rpcr1:pcr;
const rpcr2:pcr;
var n1:Nonce;
var npcr1:pcr;
var npcr2:pcr;
var Ack:Data;
var AK;
fresh r1,AkR:Nonce;
send_1(S,R,{{h1(rpcr1,r1),r1,S}sk(S)}pk(R));
recv_2(R,S,{{h1(npcr1,n1),n1,R}sk(R)}pk(S));
send_3(S,R,{{h1(rpcr2,r1),AkR}sk(S)}pk(R));
recv_4(R,S,{{h1(npcr2,n1),AK,Ack}sk(R)}pk(S));

claim(S,Niagree);
claim(S,Nisynch);
claim(S,Secret,AK);
};

role R {
var r1:Nonce;
var rpcr1:pcr;
var rpcr2:pcr;
const npcr1:pcr;
const npcr2:pcr;
var AkR:Nonce;
const Ack:Data;
fresh n1,key2 :Nonce;
macro AK=h1(AkR,key2);
recv_1(S,R,{{h1(rpcr1,r1),r1,S}sk(S)}pk(R));
send_2(R,S,{{h1(npcr1,n1),n1,R}sk(R)}pk(S));
recv_3(S,R,{{h1(rpcr2,r1),AkR}sk(S)}pk(R));
send_4(R,S,{{h1(npcr2,n1),AK,Ack}sk(R)}pk(S));
claim(R,Niagree);
claim(R,Nisynch);


};

}